#include "main.h"

int num_tokens(char *str, char *delimiters);
char **tokstr(char *line, char *delimiters);
int string_length(char *str, char *delimiters);

/**
 * num_tokens - calcs num of toks in str
 * @str: string to tokenize
 * @delimiters: delimiters to tokenize based on
 * Return: num of tokens in overall str
 */
int num_tokens(char *str, char *delimiters)
{
	int total_tokens = 0, x, length = 0;

	length = strlen(str);
	for (x = 0; x < length; x++)
	{
	if (str[x] && str[x] != delimiters[0] && str[x] != delimiters[1])
	{
		total_tokens++;
		x += string_length(str + x, delimiters);
	}
	}
	return (total_tokens);
}

/**
 * string_length - computes length of substr / token
 * @str: string in question
 * @delimiters: delimiters to tok based on
 * Return: length of substr
 */
int string_length(char *str, char *delimiters)
{
	int x = 0;

	while (str[x] && str[x] != delimiters[0] && str[x] != delimiters[1])
	{
		x++;
	}
	return (x);
}

/**
 * tokstr - tokenizes str into substrs
 * @line: str to tokenize
 * @delimiters: delim to tokenize based on
 * Return: token array
 */
char **tokstr(char *line, char *delimiters)
{
	char **tokenStorage;
	int x, y = 0, z, total_tokens, ssLen = 0;

	if (!line)
		return (NULL);
	if (!(*line))
		return (NULL);
	total_tokens = num_tokens(line, delimiters);
	tokenStorage = malloc(sizeof(char *) * (total_tokens + 1));
	for (x = 0; x < total_tokens; x++)
	{
		while (line[y] == *delimiters || line[y] == delimiters[1])
			y++;

		ssLen = string_length(line + y, delimiters);
		tokenStorage[x] = malloc(sizeof(char) * (ssLen + 1));

		for (z = 0; z < ssLen; z++, y++)
			tokenStorage[x][z] = line[y];

		tokenStorage[x][z] = '\0';
	}
	tokenStorage[x] = NULL;
	return (tokenStorage);
}
